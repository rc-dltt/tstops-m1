schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type FootballMatch
  @join__type(graph: MATCHES, key: "id")
{
  id: ID!
  no: Int
  startTime: String!
  venue: String!
  homeTeam: Team!
  visitorsTeam: Team!
}

type Horse
  @join__type(graph: RACES, key: "id")
{
  id: ID!
  name: String!
  rank: Int
}

scalar join__FieldSet

enum join__Graph {
  MATCHES @join__graph(name: "matches", url: "http://localhost:4002/graphql")
  RACES @join__graph(name: "races", url: "http://localhost:4001/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Player
  @join__type(graph: MATCHES, key: "id")
{
  id: ID!
  name: String!
  age: Int
  team: Team
}

type Query
  @join__type(graph: MATCHES)
  @join__type(graph: RACES)
{
  matches: [FootballMatch]! @join__field(graph: MATCHES)
  teams: [Team]! @join__field(graph: MATCHES)
  players: [Player]! @join__field(graph: MATCHES)
  races: [Race]! @join__field(graph: RACES)
  horses: [Horse]! @join__field(graph: RACES)
}

type Race
  @join__type(graph: RACES, key: "id")
{
  id: ID!
  no: Int
  startTime: String!
  venue: String!
  horses: [Horse]!
}

type Team
  @join__type(graph: MATCHES, key: "id")
{
  id: ID!
  name: String!
  country: String!
  players: [Player!]!
}
